version: '3.8'

# List of used networks
networks:
  api:
    name: api
    driver: overlay

# List of used volumes
volumes:
  postgres:
    driver: local
  redis:
    driver: local

# List of used services
services:
  # The API application container
  app:
    image: ${IMAGE_REGISTRY}/api-app:${IMAGE_TAG:-latest}
    build:
      context: ./
      dockerfile: ./.docker/prod/app/Dockerfile
    env_file:
      - .env.prod
    # TODO: add storage volume
    # volumes:
    #   - ./:/var/www/html
    links:
      - postgres
      - redis
    hostname: api
    ports:
      # TODO: Remove ports binding
      - "8000:8000"
    networks:
      - api
    restart: always

#  # The queue container
#  queue:
#    build:
#      context: ./.docker/prod/queue
#      dockerfile: Dockerfile
#    volumes:
#      - ./:/var/www/html
#    links:
#      - postgres
#      - redis
#    networks:
#      - api
#    restart: always
#
#  # The schedule container
#  schedule:
#    build:
#      context: ./.docker/prod/schedule
#      dockerfile: Dockerfile
#    volumes:
#      - ./:/var/www/html
#    links:
#      - postgres
#      - redis
#      - mailhog
#    networks:
#      - api
#    restart: always

  # The PostgreSQL container
  postgres:
    build:
      context: ./
      dockerfile: ./.docker/prod/postgres/Dockerfile
    image: ${IMAGE_REGISTRY}/api-postgres:${IMAGE_TAG:-latest}
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - api
    restart: always

  # The Redis container
  redis:
    build:
      context: ./
      dockerfile: ./.docker/prod/redis/Dockerfile
    image: ${IMAGE_REGISTRY}/api-redis:${IMAGE_TAG:-latest}
    env_file:
      - .env.prod
    volumes:
      - redis:/data
    networks:
      - api
    restart: always
