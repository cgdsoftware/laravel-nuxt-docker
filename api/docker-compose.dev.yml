version: '3.8'

services:
  app:
    build:
      context: ./.docker/dev/app
      dockerfile: Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    volumes:
      - ./:/var/www/html
    links:
      - postgres
      - postgres-testing
      - redis
      - mailhog
    hostname: api
    ports:
      - "8000:8000"
    networks:
      - api
      - gateway
    restart: unless-stopped

  queue:
    build:
      context: ./.docker/dev/queue
      dockerfile: Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    volumes:
      - ./:/var/www/html
    links:
      - postgres
      - redis
      - mailhog
    networks:
      - api

  schedule:
    build:
      context: ./.docker/dev/schedule
      dockerfile: Dockerfile
      args:
        IMAGE_REGISTRY: ${IMAGE_REGISTRY}
        IMAGE_TAG: ${IMAGE_TAG}
    volumes:
      - ./:/var/www/html
    links:
      - postgres
      - redis
      - mailhog
    networks:
      - api

  postgres:
    build:
      context: ./.docker/dev/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./.docker/dev/postgres/dumps/:/tmp/
    ports:
      - "54321:5432"
    networks:
      - api

  postgres-testing:
    build:
      context: ./.docker/dev/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - api

  redis:
    build:
      context: ./.docker/dev/redis
      dockerfile: Dockerfile
    # TODO: Add one more volume for configuration (disable background saves)
    volumes:
      - redis:/data
    ports:
      - "63791:6379"
    networks:
      - api

  mailhog:
    build:
      context: ./.docker/dev/mailhog
      dockerfile: Dockerfile
    ports:
      - "8026:8025"
    networks:
      - api

volumes:
  postgres:
    driver: local

  redis:
    driver: local

networks:
  api:
    name: api

  gateway:
    name: gateway
    external: true
